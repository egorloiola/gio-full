.dlyacuba {
    justify-content: center;
    align-items: center;
    height: calc(100vh/3);
    display: flex; // Устанавливает элемент как flex-контейнер
    position: relative; // sec
    background: mix(rgb(209, 237, 52), rgb(13, 4, 137));


    ul {
        perspective: 1000px; // Задает перспективу для 3D-трансформаций
        transform: translateZ(#{$p * 8}); // Смещает элемент по оси Z на заданное значение
        display: flex; // Устанавливает элемент как flex-контейнер
        list-style: none; // Убирает маркеры списка
        margin: 0; // Убирает внешние отступы
        padding: $p; // Устанавливает внутренние отступы равные $p

        li {
            transform-style: preserve-3d; // Сохраняет 3D-трансформации для дочерних элементов
            padding: $p; // Устанавливает внутренние отступы равные $p
        }
    }

    .clips {
        position: absolute; // Позиционирует элемент абсолютно
        top: 0; // Прижимает к верхнему краю родительского элемента
        left: 0; // Прижимает к левому краю родительского элемента
        width: 0; // Устанавливает ширину равной 0
        height: 0; // Устанавливает высоту равной 0
        opacity: 0; // Делает элемент невидимым
        z-index: -100; // Устанавливает порядок наложения ниже остальных элементов
    }

    .link {
        transform-style: preserve-3d; // Сохраняет 3D-трансформации для дочерних элементов
        position: relative; // Позиционирует элемент относительно себя
        width: $p*8; // Устанавливает ширину равной $p*8
        height: $p*8; // Устанавливает высоту равной $p*8


        a {
            transform-style: preserve-3d; // Сохраняет 3D-трансформации для дочерних элементов
            transform-origin: $p*4 $p*4 -#{$p*4}; // Задает точку отсчета для 3D-трансформаций
            display: block; // Устанавливает элемент как блочный
            position: absolute; // Позиционирует элемент абсолютно
            z-index: 1; // Устанавливает порядок наложения
            transform: translateZ(#{$p*2}); // Смещает элемент по оси Z на заданное значение
            width: 100%; // Устанавливает ширину равной 100%
            height: 100%; // Устанавливает высоту равной 100%

            &:nth-child(1) {
                // Стили для первого дочернего элемента
                top: 0; // Прижимает к верхнему краю родительского элемента
                left: 0; // Прижимает к левому краю родительского элемента
                height: 50%; // Устанавливает высоту равной 50%
                clip-path: polygon(50% 100%, 0 0, 100% 0); // Обрезает элемент по заданной фигуре

                &:hover,
                &:focus {

                    // Эффекты при наведении или фокусе
                    ~ .cube {
                        // Находит соседний элемент с классом .cube
                        transform: rotateX(-0.5turn); // Вращает куб по оси X

                        div:nth-child(6) {
                            // Для шестого дочернего элемента
                            transform: rotateY(180deg) rotateZ(180deg) translateZ($p*8); // Применяет трансформации
                        }
                    }
                }
            }

            &:nth-child(2) {
                // Стили для второго дочернего элемента
                top: 0; // Прижимает к верхнему краю родительского элемента
                right: 0; // Прижимает к правому краю родительского элемента
                width: 50%; // Устанавливает ширину равной 50%
                clip-path: polygon(100% 100%, 0 50%, 100% 0); // Обрезает элемент по заданной фигуре

                &:hover,
                &:focus {

                    // Эффекты при наведении или фокусе
                    ~ .cube {
                        // Находит соседний элемент с классом .cube
                        transform: rotateY(-0.5turn); // Вращает куб по оси Y
                    }
                }
            }

            &:nth-child(3) {
                // Стили для третьего дочернего элемента
                bottom: 0; // Прижимает к нижнему краю родительского элемента
                right: 0; // Прижимает к правому краю родительского элемента
                height: 50%; // Устанавливает высоту равной 50%
                clip-path: polygon(0 100%, 50% 0, 100% 100%); // Обрезает элемент по заданной фигуре

                &:hover,
                &:focus {

                    // Эффекты при наведении или фокусе
                    ~ .cube {
                        // Находит соседний элемент с классом .cube
                        transform: rotateX(0.5turn); // Вращает куб по оси X

                        div:nth-child(6) {
                            // Для шестого дочернего элемента
                            transform: rotateY(180deg) rotateZ(180deg) translateZ($p*8); // Применяет трансформации
                        }
                    }
                }
            }

            &:nth-child(4) {
                // Стили для четвертого дочернего элемента
                bottom: 0; // Прижимает к нижнему краю родительского элемента
                left: 0; // Прижимает к левому краю родительского элемента
                width: 50%; // Устанавливает ширину равной 50%
                clip-path: polygon(0 100%, 0 0, 100% 50%); // Обрезает элемент по заданной фигуре

                &:hover,
                &:focus {

                    // Эффекты при наведении или фокусе
                    ~ .cube {
                        // Находит соседний элемент с классом .cube
                        transform: rotateY(0.5turn); // Вращает куб по оси Y
                    }
                }
            }

            // Общие стили для всех четырех дочерних элементов при наведении или фокусе
            &:nth-child(1),
            &:nth-child(2),
            &:nth-child(3),
            &:nth-child(4) {

                &:hover,
                &:focus {
                    z-index: 2; // Устанавливает порядок наложения выше
                    transform: translateZ(#{$p*3}); // Смещает элемент по оси Z
                    // transform: translateZ(42px); // Смещает элемент по оси Z
                    width: 100% !important; // Устанавливает ширину равной 100% с приоритетом
                    height: 100% !important; // Устанавливает высоту равной 100% с приоритетом
                    -webkit-clip-path: none !important; // Убирает обрезку для WebKit
                    clip-path: none !important; // Убирает обрезку
                    transition: all 100ms ease 500ms; // Задает анимацию для всех свойств
                }
            }
        }
    }

    .cube {
        transform-style: preserve-3d; // Сохраняет 3D-трансформации для дочерних элементов
        transform-origin: $p*4 $p*4 -#{$p*4}; // Задает точку отсчета для 3D-трансформаций
        position: relative; // Позиционирует элемент относительно себя
        z-index: 0; // Устанавливает порядок наложения
        display: block; // Устанавливает элемент как блочный
        width: 100%; // Устанавливает ширину равной 100%
        height: 100%; // Устанавливает высоту равной 100%
        transition: all 300ms ease-out; // Задает анимацию для всех свойств с плавным замедлением

        div {
            display: flex; // Устанавливает элемент как flex-контейнер
            align-items: center; // Центрирует элементы по вертикали
            align-content: center; // Центрирует элементы по вертикали
            justify-content: center; // Центрирует элементы по горизонтали
            position: absolute; // Позиционирует элемент абсолютно
            top: 0; // Прижимает к верхнему краю родительского элемента
            left: 0; // Прижимает к левому краю родительского элемента
            width: 100%; // Устанавливает ширину равной 100%
            height: 100%; // Устанавливает высоту равной 100%
            color: white; // Устанавливает цвет текста в белый

            
            svg {
                width: $p*4; // Устанавливает ширину svg равной $p*4
                height: $p*4; // Устанавливает высоту svg равной $p*4

                path:not(.fill) {
                    // Для всех путей, не имеющих класс .fill
                    fill: none; // Убирает заливку
                    stroke: white; // Устанавливает цвет обводки в белый
                    stroke-width: 5px; // Устанавливает ширину обводки
                    stroke-linecap: round; // Устанавливает закругленные концы обводки
                    stroke-linejoin: round; // Устанавливает закругленные углы обводки
                }

                path.fill {
                    // Для путей с классом .fill
                    fill: white; // Устанавливает заливку в белый
                }
            }

            // Стили для верхней грани куба
            &:nth-child(1) {
                transform-origin: center top; // Задает точку вращения в центре верхней грани
                transform: rotateX(90deg) translateY(#{-($p*8)}); // Вращает и смещает элемент
            }

            // Стили для нижней грани куба
            &:nth-child(2) {
                transform-origin: center bottom; // Задает точку вращения в центре нижней грани
                transform: rotateX(-90deg) translateY($p*8); // Вращает и смещает элемент
            }

            // Стили для левой грани куба
            &:nth-child(3) {
                transform-origin: left center; // Задает точку вращения в центре левой грани
                transform: rotateY(-90deg) translateX(#{-($p*8)}); // Вращает и смещает элемент
            }

            // Стили для правой грани куба
            &:nth-child(4) {
                transform-origin: right center; // Задает точку вращения в центре правой грани
                transform: rotateY(90deg) translateX($p*8); // Вращает и смещает элемент
            }

            // Стили для передней грани куба
            &:nth-child(5) {
                transform-origin: center center; // Задает точку вращения в центре передней грани
                transform: rotateX(0); // Не вращает элемент
            }

            // Стили для задней грани куба
            &:nth-child(6) {
                transform-origin: center center; // Задает точку вращения в центре задней грани
                transform: rotateY(180deg) translateZ($p*8); // Вращает и смещает элемент
            }
        }

        &.github {

            // Стили для куба с классом .github
            div {

                // Стили для верхней грани куба
                &:nth-child(1) {
                    background: lighten($github, 35%); // Осветляет цвет $github на 35%
                }

                // Стили для нижней грани куба
                &:nth-child(2) {
                    background: lighten($github, 10%); // Осветляет цвет $github на 10%
                }

                // Стили для левой грани куба
                &:nth-child(3) {
                    background: lighten($github, 20%); // Осветляет цвет $github на 20%
                }

                // Стили для правой грани куба
                &:nth-child(4) {
                    background: lighten($github, 20%); // Осветляет цвет $github на 20%
                }

                // Стили для передней грани куба
                &:nth-child(5) {
                    background: $github; // Устанавливает цвет передней грани равным $github
                }

                // Стили для задней грани куба
                &:nth-child(6) {
                    background: white; // Устанавливает цвет задней грани в белый
                    color: $github; // Устанавливает цвет текста равным $github
                }
            }
        }
    }
}